/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.duncte123.biblescraper.scrapers;

import org.json.JSONObject;
import org.json.JSONTokener;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class BibleScraper extends BaseScraper<JSONObject> {
    private static final String BASE_URL = "http://getbible.net/json?p=";
    /// <editor-fold desc="PASSAGES">
    private static final String[] PASSAGES = {
            "Genesis",
            "Exodus",
            "Leviticus",
            "Numbers",
            "Deuteronomy",
            "Joshua",
            "Judges",
            "Ruth",
            "1 Samuel",
            "2 Samuel",
            "1 Kings",
            "2 Kings",
            "1 Chronicles",
            "2 Chronicles",
            "Ezra",
            "Nehemiah",
            "Esther",
            "Job",
            "Psalm",
            "Proverbs",
            "Ecclesiastes",
            "Song of Solomon",
            "Isaiah",
            "Jeremiah",
            "Lamentations",
            "Ezekiel",
            "Daniel",
            "Hosea",
            "Joel",
            "Amos",
            "Obadiah",
            "Jonah",
            "Micah",
            "Nahum",
            "Habakkuk",
            "Zephaniah",
            "Haggai",
            "Zechariah",
            "Malachi",
            "Matthew",
            "Mark",
            "Luke",
            "John",
            "Acts",
            "Romans",
            "1 Corinthians",
            "2 Corinthians",
            "Galatians",
            "Ephesians",
            "Philippians",
            "Colossians",
            "1 Thessalonians",
            "2 Thessalonians",
            "1 Timothy",
            "2 Timothy",
            "Titus",
            "Philemon",
            "Hebrews",
            "James",
            "1 Peter",
            "2 Peter",
            "1 John",
            "2 John",
            "3 John",
            "Jude",
            "Revelation",
    };
    /// </editor-fold>

    public BibleScraper() {
        super(BASE_URL + PASSAGES[0], "parts/bible.txt", (in) -> {
            System.out.println(in);

            if (in == null || in.equalsIgnoreCase("NULL")) {
                return null;
            }

            return new JSONObject(
                    in.substring(1, in.length() - 2)
            );
        });
    }

    @Override
    protected List<String> getUsableText() {
        List<String> verses = new ArrayList<>();
        doParseLoop(verses);

        return verses;
    }

    private void doParseLoop(List<String> verses) {
        for (String passage : PASSAGES) {
            System.out.println(passage);

            this.setUrl(BASE_URL + passage);
            this.getAndParse();

            // Get the data for a verse
            JSONObject json = this.getParsed();

            // Skip this verse if there is no data
            if (json == null) {
                continue;
            }

            String bookName = json.getString("book_name");
            JSONObject books = json.getJSONObject("book");
            List<String> bookNames = parseNumberList(books);

            // loop over all the book numbers
            for (String bookNr : bookNames) {
                System.out.println(bookNr);
                JSONObject book = books.getJSONObject(bookNr).getJSONObject("chapter");
                // Write the number to the file
                verses.add(
                        parseBook(bookName, bookNr, book)
                );
            }
        }
    }

    /**
     * Parses a book from the api to a string that we insert into the file
     *
     * @param bookName The name of the book
     * @param bookNr The number if the book
     * @param book the book data itself
     * @return a string with the book data parsed to our format
     */
    private String parseBook(String bookName, String bookNr, JSONObject book) {
        StringBuilder builder = new StringBuilder();
        // Get a list of all the verses
        List<String> verseNumbers = parseNumberList(book);

        System.out.println(verseNumbers);
        System.out.println(book);

        for (String verseNum : verseNumbers) {
            System.out.println(verseNum);
            String verse = book.getJSONObject(verseNum).getString("verse").replaceAll("\r\n", "\n");

            // Write the verse to the string in a specified format
            builder.append(bookName)
                    .append(' ')
                    .append(bookNr)
                    .append(':')
                    .append(verseNum)
                    .append(' ')
                    .append(verse);
        }

        return builder.toString().trim();
    }

    /**
     *  Parses a number index to a list of strings with the numbers properly sorted
     *
     * @param json The json object with the keys that are numbers
     * @return the parsed list
     */
    private List<String> parseNumberList(JSONObject json) {
        return json.names()
                .toList()
                .stream()
                .map(String::valueOf)
                .map(Integer::valueOf)
                .sorted()
                .map(String::valueOf)
                .collect(Collectors.toList());
    }
}
