/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.duncte123.biblescraper;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.function.Consumer;

/**
 * @author duncte123
 * Created on 04-11-2019
 *
 * Data comes from http://www.saidwhat.co.uk/proverb/viewall.php
 */
public class App {
    private static final OkHttpClient CLIENT = new OkHttpClient();
    //    private static final String BASE_URL = "https://en.wikipedia.org/wiki/List_of_proverbial_phrases";
    private static final String BASE_URL = "http://www.saidwhat.co.uk/proverb/viewall.php";

    private App() throws Exception {
        File output = new File("output.txt");

        createFileAndDeleteIfExists(output);

        try (FileWriter fw = new FileWriter(output)) {
            try (BufferedWriter writer = new BufferedWriter(fw)) {

                // Get the data for a verse
                Document doc = loadHTML();

                // Skip this verse if there is no data
                if (doc == null) {
                    return;
                }

                parseText(doc, (s) -> {
                    try {
                        writer.write(s);
                        writer.write("\n");
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                });
            }
        }
    }

    /**
     * Checks if the output file exists and if it does deletes it and creates it again
     *
     * @param file
     *         the target file
     *
     * @throws IOException
     *         when something goes wrong
     */
    private void createFileAndDeleteIfExists(File file) throws IOException {
        if (file.exists()) {
            file.delete();
        }

        file.createNewFile();
    }

    /**
     * Gets the loaded document and parses it into the saying that we need
     *
     * @param doc
     *         The html document
     * @param cb
     *         The callback that gets called when we need to write something to the file
     */
    private void parseText(Document doc, Consumer<String> cb) {
        final String[] items = doc.select("div#centercontent").html().split("\n");

        System.out.println(items.length);

        for (String item : items) {
            if (item.startsWith("<br>")) {
                final String parsed = item.replaceFirst("<br>", "").trim();

                if (!parsed.isBlank()) {
                    cb.accept(parsed);
                }
            }
        }
    }

    /**
     * Requests json data from the website and returns it as json object
     *
     * @return a json object with the data or null
     */
    private Document loadHTML() {
        Request request = new Request.Builder()
                .url(BASE_URL)
                .get()
                .build();

        try (Response response = CLIENT.newCall(request).execute()) {
            //noinspection ConstantConditions
            Document json = parseHTML(response.body().string());
            // Close the response when we are done
            response.close();
            return json;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Parses a response from the api to a Document
     *
     * @param in
     *         the input html
     *
     * @return the parsed html document
     */
    private Document parseHTML(String in) {
        if (in == null || in.equalsIgnoreCase("NULL")) {
            return null;
        }

        return Jsoup.parse(in);
    }

    public static void main(String[] args) throws Exception {
        new App();
    }
}
